  'use client';


  // Learning.js
  import React, { useState } from "react";
  import Head from "next/head";
  import styles from "./Learning.module.scss";
  import Image from "next/image";
  import Link from "next/link";
 
  const questions = [
    {
      question: "What is the CVE for the 2020 Cross-Site Scripting (XSS) vulnerability found in WPForms?",
      correctAnswer: "CVE-2020-10385",
      hint: 'No Hint',
    },
    {
      question: "There was a Local Privilege Escalation vulnerability found in the Debian version of Apache Tomcat, back in 2016. What's the CVE for this vulnerability?",
      correctAnswer: "NTLM",
      hint: 'No Hint',
    },
    {
      question: "What are automated tasks called in Linux?",
      correctAnswer: "cron jobs",
      hint: 'Search for => automated tasks Linux',
    },
    {
      question: "What number base could you use as a shorthand for base 2 (binary)?",
      correctAnswer: "base 16",
      hint: 'Octal (base 8) is not the correct answer.',
    },
    {
      question: "If a password hash starts with $6$, what format is it (Unix variant)?",
      correctAnswer: "SHA-512",
      hint: '___-___',
    },
    
    // Add more questions as needed
    // {
    //   question: "Another question here?",
    //   correctAnswer: "Correct answer for the second question",
    // },
    // ...
  ];

  const Learning = () => {

    const [answers, setAnswers] = useState(Array(questions.length).fill(""));
    const [showResults, setShowResults] = useState(false);
    const [showHints, setShowHints] = useState(Array(questions.length).fill(false));
    const [checkedQuestionIndex, setCheckedQuestionIndex] = useState(-1); // Add the state for checked question index
  
    const handleInputChange = (index, value) => {
      const updatedAnswers = [...answers];
      updatedAnswers[index] = value;
      setAnswers(updatedAnswers);
      setShowResults(false); // Hide the results as you type
    };
  
    const handleCheckAnswer = (event, index) => {
      event.preventDefault(); // Prevent form submission and page refresh
      setShowResults(true);
      setCheckedQuestionIndex(index);
    };
  
    const toggleHint = (index) => {
      const updatedShowHints = [...showHints];
      updatedShowHints[index] = !updatedShowHints[index];
      setShowHints(updatedShowHints);
    };







    return (
      <div className={styles.container}>
        <Head>
          <title>Example Research Question</title>
          <meta name="description" content="Learning Page for Learners" />
        </Head>

        <main className={styles.main}>
          <div className={styles.textSection}>
            <div className={styles.contentSection}>
              <h1 className={styles.heading}>Example Research Question</h1>
              <p>
              Often in hacking you'll come across software that might be open to exploitation. For example, Content Management Systems (such as Wordpress, FuelCMS, Ghost, etc) are frequently used to make setting up a website easier, and many of these are vulnerable to various attacks. So where would we look if we wanted to exploit specific software?
              </p><br />
              <p>
              The answer to that question lies in websites such as:
             </p><br />
             <ul>
              <li>&emsp;<Link href='https://www.exploit-db.com/'>ExploitDB</Link></li>
              <li>&emsp;<Link href='https://nvd.nist.gov/vuln/search'>NVD</Link></li>
              <li>&emsp;<Link href='https://cve.mitre.org/'>CVE Mitre</Link></li>
            </ul>
            
            <br></br>
              <p>NVD keeps track of CVEs (Common Vulnerabilities and Exposures) -- whether or not there is an exploit publicly available -- so it's a really good place to look if you're researching vulnerabilities in a specific piece of software. CVEs take the form: CVE-YEAR-IDNUMBER
(Hint: It's going to be really useful in the questions!)</p>
              <br></br>
              <p><Link href='https://www.exploit-db.com/'>ExploitDB</Link> tends to be very useful for hackers, as it often actually contains exploits that can be downloaded and used straight out of the box. It tends to be one of the first stops when you encounter software in a CTF or pentest.

</p>
<br></br>
<p>If you're inclined towards the CLI on Linux, Kali comes pre-installed with a tool called "searchsploit" which allows you to search ExploitDB from your own machine. This is offline, and works using a downloaded version of the database, meaning that you already have all of the exploits already on your Kali Linux!

</p>

<br></br>
<p>Let's take an example. Say we're playing a CTF and we come across a website:

</p>





<br></br>

              <Image src='/static/cms.png' width={926} height={384} alt="bruto-free-online-cybersecurity-learning-platform-google-search"></Image>
              <br /> 
              <p>
              Well, this is quite obviously FuelCMS. Usually it won't be this obvious, but hey, we'll work with what we've got!

              </p>
              <br />
              <p>
              We know the software, so let's search for it in ExploitDB.</p><p>
(Note: I'm going to use the CLI tool in Kali, as it tends to be quicker from a workflow perspective -- however, you are welcome to use the website)
              </p><br />
              <p>I'm using the command <code className={styles.codeStyle}>searchsploit fuel cms</code> to search for exploits:</p>
              
              <br></br>
              
              <Image src='/static/searchsploit.png' width={1160} height={70} alt="bruto-free-online-cybersecurity-learning-platform-google-search"></Image>
              <br />
              <p>If you prefer doing things in the website, here are the results from there:

</p>
<br></br>
              <Image src='/static/exploitdb.png' width={1162.5} height={377.5} alt="bruto-free-online-cybersecurity-learning-platform-google-search"></Image>
<br></br>

              <p>
              Success! We've got an exploit that we can now use against the website!

</p>
              <br />
              <p>Actually using the exploit is outwith the scope of this room, but you can see the process. 

</p>
<br></br>
<p>If you click on the title you'll be given a bit more of an explanation about the exploit:

</p>
<br></br>

              <Image src='/static/fuelcms-rce.png' width={1080} height={241.25} alt="bruto-free-online-cybersecurity-learning-platform-google-search"></Image>
              <br />

              <p>
              Pay particular attention to the CVE numbers; you'll need them for the questions!
</p><p>The format will be like so: <code className={styles.codeStyle}>CVE-YEAR-NUMBER</code></p>
              <br />
              <p><i className={styles.italicfont}>Note: CVEs numbers are assigned when the vulnerability are discovered, not when they are publicised. Bear in mind that if a vulnerability is discovered at the end of a year, or if the process of confirming and rectifying the vulnerability takes a long time, then the release date might be the year after the year in the CVE date... bear this in mind when answering the following questions.
              </i>
</p>
              <br />
              



            </div>
          </div>


  {/* End of content */}


















  {questions.map((questionObj, index) => (
  <div key={index} className={styles.inputSection}>
    <h2 className={styles.subHeading}>
      Question {index + 1}: {/* Add the question number here */}
    </h2>
    <p>{questionObj.question}</p>
    <div className={`${styles.hintContainer} ${showHints[index] ? styles.showHint : ""}`}>
      <button
        className={`${styles.buttonHint} ${showHints[index] ? styles.showHint : ""}`}
        type="button"
        onClick={() => toggleHint(index)}
      >
        Hint
      </button>
      {showHints[index] && (
        <p className="hintText">{questionObj.hint}</p>
      )}
    </div>
    <form onSubmit={(event) => handleCheckAnswer(event, index)}>
      <input
        className={styles.input}
        type="text"
        value={answers[index]}
        onChange={(e) => handleInputChange(index, e.target.value)}
        placeholder="Your answer"
      />
      <button
        type="submit"
        className={styles.submitButton}
      >
        Check Answer
      </button>
      {showResults && checkedQuestionIndex === index && (
        <div
          className={`${styles.result} ${
            answers[index].toLowerCase() === questionObj.correctAnswer.toLowerCase()
              ? styles.correctAnswer
              : styles.incorrectAnswer
          }`}
        >
          {answers[index].toLowerCase() === questionObj.correctAnswer.toLowerCase() ? (
            <p>Correct! Your answer is right.</p>
          ) : (
            <p>Sorry, your answer is incorrect. Try again!</p>
          )}
        </div>
      )}
    </form>
  </div>
))}







        </main>
      </div>
    );
  };

  export default Learning;

