const commands = {
    'man scp' : "scp -words [-12346BCpqrv ] [-c cipher ] [-F ssh_config ] [-i identity_file ] [-l limit ] [-o ssh_option ] [-P port ] [-S program ] \n[[user @ ] host1 : file1 ] ... [[user @ ] host2 : file2 ] \n\nscp copies files between hosts on a network. It uses ssh(1) for data transfer, and uses the same authentication and provides the \nsame security as ssh(1). scp will ask for passwords or passphrases if they are needed for authentication.\n\nFile names may contain a user and host specification to indicate that the file is to be copied to/from that host. Local file names can be made explicit using absolute or relative pathnames to avoid scp treating file names containing ':' as host specifiers. Copies between two remote hosts are also permitted.\n\nThe options are as follows:\n\n-1\n  Forces scp to use protocol 1.\n\n-2\n  Forces scp to use protocol 2.\n\n-3\n  Copies between two remote hosts are transferred through the local host. Without this option, the data is copied directly between the two remote hosts. Note that this option disables the progress meter.\n\n-4\n  Forces scp to use IPv4 addresses only.\n\n-6\n  Forces scp to use IPv6 addresses only.\n\n-B\n  Selects batch mode (prevents asking for passwords or passphrases).\n\n-C\n  Compression enabled. Passes the -C flag to ssh(1) to enable compression.\n\nc cipher\n  Selects the cipher to use for encrypting the data transfer. This option is directly passed to ssh(1).\n\n-F ssh_config\n  Specifies an alternative per-user configuration file for ssh. This option is directly passed to ssh(1).\n\n-i identity_file\n  Selects the file from which the identity (private key) for public key authentication is read. This option is directly passed to ssh(1).\n\n-l limit\n  Limits the used bandwidth, specified in Kbit/s.\n\n-o ssh_option\n  Can be used to pass options to ssh in the format used in ssh_config5. This is useful for specifying options for which there is no separate scp command-line flag. For full details of the options listed below, and their possible values, see ssh_config5.\n\n-P port\n  Specifies the port to connect to on the remote host. Note that this option is written with a capital 'P' because -p is already reserved for preserving the times and modes of the file.\n\n-p\n  Preserves modification times, access times, and modes from the original file.\n\n-q\n  Quiet mode: disables the progress meter as well as warning and diagnostic messages from ssh(1).\n\n-r\n  Recursively copy entire directories. Note that scp follows symbolic links encountered in the tree traversal.\n\n-S program\n  Name of the program to use for the encrypted connection. The program must understand ssh(1) options.\n\n-v\n  Verbose mode. Causes scp and ssh(1) to print debugging messages about their progress. This is helpful in debugging connection, authentication, and configuration problems."
    ,
    ls: 'hello.txt',
    'cat hello.txt': 'Nothing here, buddy.',
    help: "Return to your information page to review the commands you can use like:\n- man\n- scp\n- fdisk\n- nano\n- nc",
    'man fdisk': "NAME         top\n   fdisk - manipulate disk partition table\n\nSYNOPSIS         top\n   fdisk [options] device\n\n   fdisk -l [device...]\n\nDESCRIPTION         top\n   fdisk is a dialog-driven program for creation and manipulation of\n   partition tables. It understands GPT, MBR, Sun, SGI and BSD\n   partition tables.\n\n   Block devices can be divided into one or more logical disks\n   called partitions. This division is recorded in the partition\n   table, usually found in sector 0 of the disk. (In the BSD world\n   one talks about `disk slices' and a `disklabel'.)\n\n   All partitioning is driven by device I/O limits (the topology) by\n   default. fdisk is able to optimize the disk layout for a\n   4K-sector size and use an alignment offset on modern devices for\n   MBR and GPT. It is always a good idea to follow fdisk's defaults\n   as the default values (e.g., first and last partition sectors)\n   and partition sizes specified by the +/-<size>{M,G,...} notation\n   are always aligned according to the device properties.\n\n   CHS (Cylinder-Head-Sector) addressing is deprecated and not used\n   by default. Please, do not follow old articles and\n   recommendations with fdisk -S <n> -H <n> advices for SSD or\n   4K-sector devices.\n\n   Note that partx(8) provides a rich interface for scripts to print\n   disk layouts, fdisk is mostly designed for humans. Backward\n   compatibility in the output of fdisk is not guaranteed. The input\n   (the commands) should always be backward compatible.\n\nOPTIONS         top\n   -b, --sector-size sectorsize\n       Specify the sector size of the disk. Valid values are 512,\n       1024, 2048, and 4096. (Recent kernels know the sector size.\n       Use this option only on old kernels or to override the\n       kernel’s ideas.) Since util-linux-2.17, fdisk differentiates\n       between logical and physical sector size. This option changes\n       both sector sizes to sectorsize.\n\n   -B, --protect-boot\n       Don’t erase the beginning of the first disk sector when\n       creating a new disk label. This feature is supported for GPT\n       and MBR.\n\n   -c, --compatibility[=mode]\n       Specify the compatibility mode, 'dos' or 'nondos'. The\n       default is non-DOS mode. For backward compatibility, it is\n       possible to use the option without the mode argument — then\n       the default is used. Note that the optional mode argument\n       cannot be separated from the -c option by a space, the\n       correct form is for example -c=dos.\n\n   -h, --help\n       Display help text and exit.\n\n   -V, --version\n       Print version and exit.\n\n   -L, --color[=when]\n       Colorize the output. The optional argument when can be auto,\n       never or always. If the when argument is omitted, it defaults\n       to auto. The colors can be disabled; for the current built-in\n       default see the --help output. See also the COLORS section.\n\n   -l, --list\n       List the partition tables for the specified devices and then\n       exit.\n\n       If no devices are given, the devices mentioned in\n       /proc/partitions (if this file exists) are used. Devices are\n       always listed in the order in which they are specified on the\n       command-line, or by the kernel listed in /proc/partitions.\n\n   -x, --list-details\n       Like --list, but provides more details.\n\n   --lock[=mode]\n       Use exclusive BSD lock for device or file it operates. The\n       optional argument mode can be yes, no (or 1 and 0) or\n       nonblock. If the mode argument is omitted, it defaults to\n       yes. This option overwrites environment variable\n       $LOCK_BLOCK_DEVICE. The default is not to use any lock at\n       all, but it’s recommended to avoid collisions with\n       systemd-udevd(8) or other tools.\n\n   -n, --noauto-pt\n       Don’t automatically create a default partition table on empty\n       device. The partition table has to be explicitly created by\n       user (by command like 'o', 'g', etc.).\n\n   -o, --output list\n       Specify which output columns to print. Use --help to get a\n       list of all supported columns.\n\n       The default list of columns may be extended if list is\n       specified in the format +list (e.g., -o +UUID).\n\n   -s, --getsz\n       Print the size in 512-byte sectors of each given block\n       device. This option is DEPRECATED in favour of blockdev(8).\n\n   -t, --type type\n       Enable support only for disklabels of the specified type, and\n       disable support for all other types.\n\n   -u, --units[=unit]\n       When listing partition tables, show sizes in 'sectors' or in\n       'cylinders'. The default is to show sizes in sectors. For\n       backward compatibility, it is possible to use the option\n       without the unit argument — then the default is used. Note\n       that the optional unit argument cannot be separated from the\n       -u option by a space, the correct form is for example\n       '-u=cylinders'.\n\n   -C, --cylinders number\n       Specify the number of cylinders of the disk. I have no idea\n       why anybody would want to do so.\n\n   -H, --heads number\n       Specify the number of heads of the disk. (Not the physical\n       number, of course, but the number used for partition tables.)\n       Reasonable values are 255 and 16.\n\n   -S, --sectors number\n       Specify the number of sectors per track of the disk. (Not the\n       physical number, of course, but the number used for partition\n       tables.) A reasonable value is 63.\n\n   -w, --wipe when\n       Wipe filesystem, RAID and partition-table signatures from the\n       device, in order to avoid possible collisions. The argument\n       when can be auto, never or always. When this option is not\n       given, the default is auto, in which case signatures are\n       wiped only when in interactive mode. In all cases detected\n       signatures are reported by warning messages before a new\n       partition table is created. See also wipefs(8) command.\n\n   -W, --wipe-partitions when\n       Wipe filesystem, RAID and partition-table signatures from a\n       newly created partitions, in order to avoid possible\n       collisions. The argument when can be auto, never or always.\n       When this option is not given, the default is auto, in which\n       case signatures are wiped only when in interactive mode and\n       after confirmation by user. In all cases detected signatures\n       are reported by warning messages before a new partition is\n       created. See also wipefs(8) command.\n\n   -V, --version\n       Display version information and exit.",
    "man nano": "Name\nnano - Nano's ANOther editor, an enhanced free Pico clone\n\nSynopsis\nnano [OPTIONS] [[+LINE,COLUMN] FILE]...\n\nDescription\nThis manual page briefly documents the nano command.\n\nnano is a small, free and friendly editor which aims to replace Pico, the default editor included in the non-free Pine package. Rather than just copying Pico's look and feel, nano also implements some missing (or disabled by default) features in Pico, such as \"search and replace\" and \"go to line and column number\".\n\nOptions\n+LINE,COLUMN\n\nPlaces cursor at line number LINE and column number COLUMN (at least one of which must be specified) on startup, instead of the default of line 1, column 1.\n-?\nSame as -h (--help).\n\n-A (--smarthome)\nMake the Home key smarter. When Home is pressed anywhere but at the very beginning of non-whitespace characters on a line, the cursor will jump to that beginning (either forwards or backwards). If the cursor is already at that position, it will jump to the true beginning of the line.\n-B (--backup)\nWhen saving a file, back up the previous version of it to the current filename suffixed with a ~.\n-C dir (--backupdir=dir)\nSet the directory where nano puts unique backup files if file backups are enabled.\n-D (--boldtext)\nUse bold text instead of reverse video text.\n-E (--tabstospaces)\nConvert typed tabs to spaces.\n-F (--multibuffer)\nEnable multiple file buffers, if available.\n-H (--historylog)\nLog search and replace strings to ~/.nano_history, so they can be retrieved in later sessions, if nanorc support is available.\n-I (--ignorercfiles)\nDon't look at SYSCONFDIR/nanorc or ~/.nanorc, if nanorc support is available.\n-K (--rebindkeypad)\nInterpret the numeric keypad keys so that they all work properly. You should only need to use this option if they don't, as mouse support won't work properly with this option enabled.\n-L (--nonewlines)\nDon't add newlines to the ends of files.\n-N (--noconvert)\nDisable automatic conversion of files from DOS/Mac format.\n-O (--morespace)\nUse the blank line below the titlebar as extra editing space.\n-Q str (--quotestr=str)\nSet the quoting string for justifying. The default is \"^([ \\t]*[#:>|}])+\" if extended regular expression support is available, or \"> \" otherwise. Note that \\t stands for a Tab.\n-R (--restricted)\nRestricted mode: don't read or write to any file not specified on the command line; read any nanorc files; allow suspending; allow a file to be appended to, prepended to, or saved under a different name if it already has one; or use backup files or spell checking. Also accessible by invoking nano with any name beginning with 'r' (e.g. \"rnano\").\n-S (--smooth)\nEnable smooth scrolling. Text will scroll line-by-line, instead of the usual chunk-by-chunk behavior.\n-T cols (--tabsize=cols)\nSet the size (width) of a tab to cols columns. The value of cols must be greater than 0. The default value is 8.\n-U (--quickblank)\nDo quick statusbar blanking. Statusbar messages will disappear after 1 keystroke instead of 25. Note that -c overrides this.\n-V (--version)\nShow the current version number and exit.\n-W (--wordbounds)\nDetect word boundaries more accurately by treating punctuation characters as part of a word.\n-Y str (--syntax=str)\nSpecify a specific syntax highlighting from the nanorc to use, if available.\n-c (--const)\nConstantly show the cursor position. Note that this overrides -U.\n-d (--rebinddelete)\nInterpret the Delete key differently so that both Backspace and Delete work properly. You should only need to use this option if Backspace acts like Delete on your system.\n-h (--help)\nShow a summary of command line options and exit.\n-i (--autoindent)\nIndent new lines to the previous line's indentation. Useful when editing source code.\n-k (--cut)\nEnable cut from cursor to end of line.\n-l (--nofollow)\nIf the file being edited is a symbolic link, replace the link with a new file instead of following it. Good for editing files in /tmp, perhaps?\n-m (--mouse)\nEnable mouse support, if available for your system. When enabled, mouse clicks can be used to place the cursor, set the mark (with a double click), and execute shortcuts. The mouse will work in the X Window System, and on the console when gpm is running.\n-o dir (--operatingdir=dir)\nSet operating directory. Makes nano set up something similar to a chroot.\n-p (--preserve)\nPreserve the XON and XOFF sequences (^Q and ^S) so they will be caught by the terminal.\n-r cols (--fill=cols)\nWrap lines at column cols. If this value is 0 or less, wrapping will occur at the width of the screen less cols columns, allowing the wrap point to vary along with the width of the screen if the screen is resized. The default value is -8.\n-s prog (--speller=prog)\nEnable alternative spell checker command.\n-t (--tempfile)\nAlways save changed buffer without prompting. Same as Pico's -t option.\n-v (--view)\nView file (read only) mode.\n-w (--nowrap)\nDisable wrapping of long lines.\n-x (--nohelp)\nDisable help screen at bottom of editor.\n-z (--suspend)\nEnable suspend ability.\n-a, -b, -e, -f, -g, -j\nIgnored, for compatibility with Pico.",
    "man nc": "NC\nSection: User Commands (1)\nIndex Return to Main Contents\n\nNAME\nnc - TCP/IP swiss army knife\nSYNOPSIS\nnc [-options] hostname port[s] [ports] ...\nnc -l -p port [-options] [hostname] [port]\nDESCRIPTION\nnetcat is a simple unix utility which reads and writes data across network connections, using TCP or UDP protocol. It is designed to be a reliable \"back-end\" tool that can be used directly or easily driven by other programs and scripts. At the same time, it is a feature-rich network debugging and exploration tool, since it can create almost any kind of connection you would need and has several interesting built-in capabilities. Netcat, or \"nc\" as the actual program is named, should have been supplied long ago as another one of those cryptic but standard Unix tools.\nIn the simplest usage, \"nc host port\" creates a TCP connection to the given port on the given target host. Your standard input is then sent to the host, and anything that comes back across the connection is sent to your standard output. This continues indefinitely, until the network side of the connection shuts down. Note that this behavior is different from most other applications which shut everything down and exit after an end-of-file on the standard input.\n\nNetcat can also function as a server, by listening for inbound connections on arbitrary ports and then doing the same reading and writing. With minor limitations, netcat doesn't really care if it runs in \"client\" or \"server\" mode -- it still shovels data back and forth until there isn't any more left. In either mode, shutdown can be forced after a configurable time of inactivity on the network side.\n\nAnd it can do this via UDP too, so netcat is possibly the \"udp telnet-like\" application you always wanted for testing your UDP-mode servers. UDP, as the \"U\" implies, gives less reliable data transmission than TCP connections and some systems may have trouble sending large amounts of data that way, but it's still a useful capability to have.\n\nYou may be asking \"why not just use telnet to connect to arbitrary ports?\" Valid question, and here are some reasons. Telnet has the \"standard input EOF\" problem, so one must introduce calculated delays in driving scripts to allow network output to finish. This is the main reason netcat stays running until the *network* side closes. Telnet also will not transfer arbitrary binary data, because certain characters are interpreted as telnet options and are thus removed from the data stream. Telnet also emits some of its diagnostic messages to standard output, where netcat keeps such things religiously separated from its *output* and will never modify any of the real data in transit unless you *really* want it to. And of course telnet is incapable of listening for inbound connections, or using UDP instead. Netcat doesn't have any of these limitations, is much smaller and faster than telnet, and has many other advantages.\n\nOPTIONS\n-c string\nspecify shell commands to exec after connect (use with caution). The string is passed to /bin/sh -c for execution. See the -e option if you don't have a working /bin/sh (Note that POSIX-conformant system must have one).\n-e filename\nspecify filename to exec after connect (use with caution). See the -c option for enhanced functionality.\n-g gateway\nsource-routing hop point[s], up to 8\n-G num\nsource-routing pointer: 4, 8, 12, ...\n-h\ndisplay help\n-i secs\ndelay interval for lines sent, ports scanned\n-l\nlisten mode, for inbound connects\n-n\nnumeric-only IP addresses, no DNS\n-o file\nhex dump of traffic\n-p port\nlocal port number (port numbers can be individual or ranges: lo-hi [inclusive])\n-q seconds\nafter EOF on stdin, wait the specified number of seconds and then quit. If seconds is negative, wait forever.\n-b\nallow UDP broadcasts\n-r\nrandomize local and remote ports\n-s addr\nlocal source address\n-t\nenable telnet negotiation\n-u\nUDP mode\n-v\nverbose [use twice to be more verbose]\n-w secs\ntimeout for connects and final net reads\n-C\nSend CRLF as line-ending\n-z\nzero-I/O mode [used for scanning]\n-T type\nset TOS flag (type may be one of \"Minimize-Delay\", \"Maximize-Throughput\", \"Maximize-Reliability\", or \"Minimize-Cost\".)",
    "man ssh": "Name\nssh - OpenSSH SSH client (remote login program)\n\nSynopsis\nssh [-1246AaCfgKkMNnqsTtVvXxYy] [-b bind_address] [-c cipher_spec] [-D[bind_address:]port] [-e escape_char] [-F configfile][-i identity_file] [-L [bind_address:]port:host:hostport] [-l login_name] [-m mac_spec] [-O ctl_cmd] [-o option] [-p port] [-R [bind_address:]port:host:hostport] [-S ctl_path] [-W host:port] [-w local_tun[:remote_tun]] [user@]hostname [command]\nDescription\nssh (SSH client) is a program for logging into a remote machine and for executing commands on a remote machine. It is intended to replace rlogin and rsh, and provide secure encrypted communications between two untrusted hosts over an insecure network. X11 connections and arbitrary TCP ports can also be forwarded over the secure channel.\n\nssh connects and logs into the specified hostname (with optional user name). The user must prove his/her identity to the remote machine using one of several methods depending on the protocol version used (see below).\n\nIf command is specified, it is executed on the remote host instead of a login shell.\n\nThe options are as follows:\n\n-1' Forces ssh to try protocol version 1 only.\n-2' Forces ssh to try protocol version 2 only.\n-4' Forces ssh to use IPv4 addresses only.\n-6' Forces ssh to use IPv6 addresses only.\n-A' Enables forwarding of the authentication agent connection. This can also be specified on a per-host basis in a configuration file.\nAgent forwarding should be enabled with caution. Users with the ability to bypass file permissions on the remote host (for the agent's Unix-domain socket) can access the local agent through the forwarded connection. An attacker cannot obtain key material from the agent, however they can perform operations on the keys that enable them to authenticate using the identities loaded into the agent.\n-a' Disables forwarding of the authentication agent connection.\n-b bind_address\nUse bind_address on the local machine as the source address of the connection. Only useful on systems with more than one address.\n-C' Requests compression of all data (including stdin, stdout, stderr, and data for forwarded X11 and TCP connections). The compression algorithm is the same used by gzip(1), and the 'level' can be controlled by the CompressionLevel option for protocol version 1. Compression is desirable on modem lines and other slow connections, but will only slow down things on fast networks. The default value can be set on a host-by-host basis in the configuration files; see the Compression option.\n-c cipher_spec\nSelects the cipher specification for encrypting the session.\nProtocol version 1 allows specification of a single cipher. The supported values are '3des', 'blowfish', and 'des'. 3des (triple-des) is an encrypt-decrypt-encrypt triple with three different keys. It is believed to be secure. blowfish is a fast block cipher; it appears very secure and is much faster than 3des. des is only supported in the ssh client for interoperability with legacy protocol 1 implementations that do not support the 3des cipher. Its use is strongly discouraged due to cryptographic weaknesses. The default is '3des'.\nFor protocol version 2, cipher_spec is a comma-separated list of ciphers listed in order of preference. See the Ciphers keyword for more information.\n-D [bind_address:]port\nSpecifies a local 'dynamic' application-level port forwarding. This works by allocating a socket to listen to port on the local side, optionally bound to the specified bind_address. Whenever a connection is made to this port, the connection is forwarded over the secure channel, and the application protocol is then used to determine where to connect to from the remote machine. Currently the SOCKS4 and SOCKS5 protocols are supported, and ssh will act as a SOCKS server. Only root can forward privileged ports. Dynamic port forwardings can also be specified in the configuration file.\nIPv6 addresses can be specified with an alternative syntax: [bind_address/]port or by enclosing the address in square brackets. Only the superuser can forward privileged ports. By default, the local port is bound in accordance with the GatewayPorts setting. However, an explicit bind_address may be used to bind the connection to a specific address. The bind_address of 'localhost' indicates that the listening port be bound for local use only, while an empty address or '*' indicates that the port should be available from all interfaces.\n-e escape_char\nSets the escape character for sessions with a pty (default: '~'). The escape character is only recognized at the beginning of a line. The escape character followed by a dot ('.') closes the connection; followed by control-Z suspends the connection; and followed by itself sends the escape character once. Setting the character to 'none' disables any escapes and makes the session fully transparent.\n-F configfile\nSpecifies an alternative per-user configuration file. If a configuration file is given on the command line, the system-wide configuration file (/etc/ssh/ssh_config) will be ignored. The default for the per-user configuration file is ~/.ssh/config.\n-f' Requests ssh to go to background just before command execution. This is useful if ssh is going to ask for passwords or passphrases, but the user wants it in the background. This implies -n. The recommended way to start X11 programs at a remote site is with something like ssh -f host xterm.\nIf the ExitOnForwardFailure configuration option is set to 'yes', then a client started with -f will wait for all remote port forwards to be successfully established before placing itself in the background.\n-g' Allows remote hosts to connect to local forwarded ports.\n-I smartcard_device\nSpecify the device ssh should use to communicate with a smartcard used for storing the user's private RSA key. This option is only available if support for smartcard devices is compiled in (default is no support).\n-i identity_file\nSelects a file from which the identity (private key) for RSA or DSA authentication is read. The default is ~/.ssh/identity for protocol version 1, and ~/.ssh/id_rsa and ~/.ssh/id_dsa for protocol version 2. Identity files may also be specified on a per-host basis in the configuration file. It is possible to have multiple -i options (and multiple identities specified in configuration files).\n-K' Enables GSSAPI-based authentication and forwarding (delegation) of GSSAPI credentials to the server.\n-k' Disables forwarding (delegation) of GSSAPI credentials to the server.\n-L [bind_address:]port:host:hostport\nSpecifies that the given port on the local (client) host is to be forwarded to the given host and port on the remote side. This works by allocating a socket to listen to port on the local side, optionally bound to the specified bind_address. Whenever a connection is made to this port, the connection is forwarded over the secure channel, and the application protocol is then used to determine where to connect to from the remote machine. Currently the SOCKS4 and SOCKS5 protocols are supported, and ssh will act as a SOCKS server. Only root can forward privileged ports. Dynamic port forwardings can also be specified in the configuration file.\n\nIPv6 addresses can be specified with an alternative syntax:\n[bind_address/]port or by enclosing the address in square brackets. Only the superuser can forward privileged ports. By default, the local port is bound in accordance with the GatewayPorts setting. However, an explicit bind_address may be used to bind the connection to a specific address. The bind_address of 'localhost' indicates that the listening port be bound for local use only, while an empty address or '*' indicates that the port should be available from all interfaces.\n\n-e escape_char\nSets the escape character for sessions with a pty (default: '~'). The escape character is only recognized at the beginning of a line. The escape character followed by a dot ('.') closes the connection; followed by control-Z suspends the connection; and followed by itself sends the escape character once. Setting the character to 'none' disables any escapes and makes the session fully transparent.\n\n-F configfile\nSpecifies an alternative per-user configuration file. If a configuration file is given on the command line, the system-wide configuration file (/etc/ssh/ssh_config) will be ignored. The default for the per-user configuration file is ~/.ssh/config.\n\n-f' Requests ssh to go to background just before command execution. This is useful if ssh is going to ask for passwords or passphrases, but the user wants it in the background. This implies -n. The recommended way to start X11 programs at a remote site is with something like ssh -f host xterm.\n\nIf the ExitOnForwardFailure configuration option is set to 'yes', then a client started with -f will wait for all remote port forwards to be successfully established before placing itself in the background.\n\n-g' Allows remote hosts to connect to local forwarded ports.\n\n-I smartcard_device\nSpecify the device ssh should use to communicate with a smartcard used for storing the user's private RSA key. This option is only available if support for smartcard devices is compiled in (default is no support).\n\n-i identity_file\nSelects a file from which the identity (private key) for RSA or DSA authentication is read. The default is ~/.ssh/identity for protocol version 1, and ~/.ssh/id_rsa and ~/.ssh/id_dsa for protocol version 2. Identity files may also be specified on a per-host basis in the configuration file. It is possible to have multiple -i options (and multiple identities specified in configuration files).\n\n-K' Enables GSSAPI-based authentication and forwarding (delegation) of GSSAPI credentials to the server.\n\n-k' Disables forwarding (delegation) of GSSAPI credentials to the server.\n\n-L\n[bind_address:]port:host:hostport\nSpecifies that the given port on the local (client) host is to be forwarded to the given host and port on the remote side. This works by allocating a socket to listen to port on the local side, optionally bound to the specified bind_address. Whenever a connection is made to this port, the connection is forwarded over the secure channel, and a connection is made to host port hostport from the remote machine. Port forwardings can also be specified in the configuration file. IPv6 addresses can be specified with an alternative syntax: [bind_address/]port/host/hostport or by enclosing the address in square brackets. Only the superuser can forward privileged ports. By default, the local port is bound in accordance with the GatewayPorts setting. However, an explicit bind_address may be used to bind the connection to a specific address. The bind_address of 'localhost' indicates that the listening port be bound for local use only, while an empty address or '*' indicates that the port should be available from all interfaces.\n\n-l login_name\nSpecifies the user to log in as on the remote machine. This also may be specified on a per-host basis in the configuration file.\n\n-M' Places the ssh client into 'master' mode for connection sharing. Multiple -M options places ssh into 'master' mode with confirmation required before slave connections are accepted. Refer to the description of ControlMaster in ssh_config(5) for details.\n\n-m mac_spec\nAdditionally, for protocol version 2 a comma-separated list of MAC (message authentication code) algorithms can be specified in order of preference. See the MACs keyword for more information.\n\n-N' Do not execute a remote command. This is useful for just forwarding ports (protocol version 2 only).\n\n-n' Redirects stdin from /dev/null (actually, prevents reading from stdin). This must be used when ssh is run in the background. A common trick is to use this to run X11 programs on a remote machine. For example, ssh -n shadows.cs.hut.fi emacs & will start an emacs on shadows.cs.hut.fi, and the X11 connection will be automatically forwarded over an encrypted channel. The ssh program will be put in the background. (This does not work if ssh needs to ask for a password or passphrase; see also the -f option.)\n\n-O ctl_cmd\nControl an active connection multiplexing master process. When the -O option is specified, the ctl_cmd argument is interpreted and passed to the master process. Valid commands are: 'check' (check that the master process is running) and 'exit' (request the master to exit).\n\n-o option\nCan be used to give options in the format used in the configuration file. This is useful for specifying options for which there is no separate command-line flag. For full details of the options listed below, and their possible values, see ssh_config(5).\n\nAddressFamily\nBatchMode\nBindAddress\nChallengeResponseAuthentication\nCheckHostIP\nCipher\nCiphers\nClearAllForwardings\nCompression\nCompressionLevel\nConnectionAttempts\nConnectTimeout\nControlMaster\nControlPath\nDynamicForward\nEscapeChar\nExitOnForwardFailure\nForwardAgent\nForwardX11\nForwardX11Trusted\nGatewayPorts\nGlobalKnownHostsFile\nGSSAPIAuthentication\nGSSAPIDelegateCredentials\nHashKnownHosts\nHost'\nHostbasedAuthentication\nHostKeyAlgorithms\nHostKeyAlias\nHostName\nIdentityFile\nIdentitiesOnly\nKbdInteractiveDevices\nLocalCommand\nLocalForward\nLogLevel\nMACs'\nNoHostAuthenticationForLocalhost\nNumberOfPasswordPrompts\nPasswordAuthentication\nPermitLocalCommand\nPort'\nPreferredAuthentications\nProtocol\nProxyCommand\nPubkeyAuthentication\nRekeyLimit\nRemoteForward\nRhostsRSAAuthentication\nRSAAuthentication\nSendEnv\nServerAliveInterval\nServerAliveCountMax\nSmartcardDevice\nStrictHostKeyChecking\nTCPKeepAlive\nTunnel\nTunnelDevice\nUsePrivilegedPort\nUser'\nUserKnownHostsFile\nVerifyHostKeyDNS\nVisualHostKey\nXAuthLocation\n\n-p port\nPort to connect to on the remote host. This can be specified on a per-host basis in the configuration file.\n\n-q' Quiet mode. Causes most warning and diagnostic messages to be suppressed.\n\n-R\n[bind_address:]port:host:hostport\nSpecifies that the given port on the remote (server) host is to be forwarded to the given host and port on the local side. This works by allocating a socket to listen to port on the remote side, and whenever a connection is made to this port, the connection is forwarded over the secure channel, and a connection is made to host port hostport from the local machine.\n\nPort forwardings can also be specified in the configuration file. Privileged ports can be forwarded only when logging in as root on the remote machine. IPv6 addresses can be specified by enclosing the address in square braces or using an alternative syntax: [bind_address/]host/port/hostport.\n\nBy default, the listening socket on the server will be bound to the loopback interface only. This may be overridden by specifying a bind_address. An empty bind_address, or the address '*', indicates that the remote socket should listen on all interfaces. Specifying a remote bind_address will only succeed if the server's GatewayPorts option is enabled (see sshd_config(5)).\n\nIf the port argument is '0', the listen port will be dynamically allocated on the server and reported to the client at run time.\n\n-S ctl_path\nSpecifies the location of a control socket for connection sharing. Refer to the description of ControlPath and ControlMaster in ssh_config(5) for details.\n\n-s' May be used to request invocation of a subsystem on the remote system. Subsystems are a feature of the SSH2 protocol which facilitate the use of SSH as a secure transport for other applications (eg. sftp(1)). The subsystem is specified as the remote command.\n\n-T' Disable pseudo-tty allocation.\n\n-t' Force pseudo-tty allocation. This can be used to execute arbitrary screen-based programs on a remote machine, which can be very useful, e.g. when implementing menu services. Multiple -t options force tty allocation, even if ssh has no local tty.\n\n-V' Display the version number and exit.\n\n-v' Verbose mode. Causes ssh to print debugging messages about its progress. This is helpful in debugging connection, authentication, and configuration problems. Multiple -v options increase the verbosity. The maximum is 3.\n\n-W host:port\nRequests that standard input and output on the client be forwarded to host on port over the secure channel. Implies -N, -T, ExitOnForwardFailure and ClearAllForwardings and works with Protocol version 2 only.\n\n-w\nlocal_tun[:remote_tun]\nRequests tunnel device forwarding with the specified tun(4) devices between the client (local_tun) and the server (remote_tun).\n\nThe devices may be specified by numerical ID or the keyword 'any', which uses the next available tunnel device. If remote_tun is not specified, it defaults to 'any'. See also the Tunnel and TunnelDevice directives in ssh_config(5). If the Tunnel directive is unset, it is set to the default tunnel mode, which is 'point-to-point'.\n\n-X' Enables X11 forwarding. This can also be specified on a per-host basis in a configuration file.\n\nX11 forwarding should be enabled with caution. Users with the ability to bypass file permissions on the remote host (for the user's X authorization database) can access the local X11 display through the forwarded connection. An attacker may then be able to perform activities such as keystroke monitoring.\n\nFor this reason, X11 forwarding is subjected to X11 SECURITY extension restrictions by default. Please refer to the ssh -Y option and the ForwardX11Trusted directive in ssh_config(5) for more information.\n\n-x' Disables X11 forwarding.\n\n-Y' Enables trusted X11 forwarding. Trusted X11 forwardings are not subjected to the X11 SECURITY extension controls.\n\n-y' Send log information using the syslog(3) system module. By default this information is sent to stderr.\n\nssh may additionally obtain configuration data from a per-user configuration file and a system-wide configuration file. The file format and configuration options are described in ssh_config(5).\n\nssh exits with the exit status of the remote command or with 255 if an error occurred.",

    
    
  };
  
  const defaultOutput = "Command not recognized. Type 'help' for available commands.";
  
  export const handleCommand = (input) => {
    const inputLowerCase = input.trim().toLowerCase();
    return commands[inputLowerCase] || defaultOutput;
  };
  